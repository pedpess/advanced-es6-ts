{"version":3,"sources":["../../app-es6/dao/NegotiationDao.js"],"names":["NegotiationDao","connection","_connection","_store","negotiation","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","event","target","error","cursor","openCursor","negotiations","currentData","result","data","value","push","Negotiation","_date","_quantity","_value","continue","clear"],"mappings":";;;;;;IAAMA,c;AAEJ,0BAAYC,UAAZ,EAAwB;AAAA;;AACtB,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKE,MAAL,GAAc,cAAd;AACD;;;;mCAEcC,W,EAAa;AAAA;;AAE1B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,YAAIC,UAAU,MACXN,WADW,CAEXO,WAFW,CAEC,CAAC,MAAKN,MAAN,CAFD,EAEgB,WAFhB,EAGXO,WAHW,CAGC,MAAKP,MAHN,EAIXQ,GAJW,CAIPP,WAJO,CAAd;;AAMAI,gBAAQI,SAAR,GAAoB,iBAAS;AAC3BN;AACD,SAFD;;AAIAE,gBAAQK,OAAR,GAAkB,iBAAS;AACzBC,kBAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,iBAAO,4BAAP;AACD,SAHD;AAID,OAhBM,CAAP;AAiBD;;;8BAES;AAAA;;AAER,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,YAAIY,SAAS,OAAKjB,WAAL,CACVO,WADU,CACE,CAAC,OAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,OAAKP,MAFP,EAGViB,UAHU,EAAb;;AAKA,YAAIC,eAAe,EAAnB;;AAEAF,eAAOP,SAAP,GAAmB,iBAAS;;AAE1B,cAAIU,cAAcN,MAAMC,MAAN,CAAaM,MAA/B;;AAEA,cAAID,WAAJ,EAAiB;;AAEf,gBAAIE,OAAOF,YAAYG,KAAvB;;AAEAJ,yBAAaK,IAAb,CAAkB,IAAIC,WAAJ,CAAgBH,KAAKI,KAArB,EAA4BJ,KAAKK,SAAjC,EAA4CL,KAAKM,MAAjD,CAAlB;;AAEAR,wBAAYS,QAAZ;AACD,WAPD,MAOO;;AAELzB,oBAAQe,YAAR;AACD;AACF,SAfD;;AAiBAF,eAAON,OAAP,GAAiB,iBAAS;AACxBC,kBAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,iBAAO,0BAAP;AACD,SAHD;AAMD,OAhCM,CAAP;AAiCD;;;4CAEuB;AAAA;;AAEtB,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,YAAIC,UAAU,OAAKN,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGX6B,KAHW,EAAd;;AAKAxB,gBAAQI,SAAR,GAAoB;AAAA,iBAASN,QAAQ,4BAAR,CAAT;AAAA,SAApB;;AAEAE,gBAAQK,OAAR,GAAkB,iBAAS;AACzBC,kBAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,iBAAO,gCAAP;AACD,SAHD;AAID,OAbM,CAAP;AAcD","file":"NegotiationDao.js","sourcesContent":["class NegotiationDao {\n\n  constructor(connection) {\n    this._connection = connection;\n    this._store = 'negotiations';\n  }\n\n  addNegotiation(negotiation) {\n\n    return new Promise((resolve, reject) => {\n\n      let request = this\n        ._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .add(negotiation);\n\n      request.onsuccess = event => {\n        resolve();\n      };\n\n      request.onerror = event => {\n        console.log(event.target.error);\n        reject('Negotiation was not addded');\n      }\n    })\n  }\n\n  listAll() {\n\n    return new Promise((resolve, reject) => {\n\n      let cursor = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .openCursor();\n\n      let negotiations = [];\n\n      cursor.onsuccess = event => {\n\n        let currentData = event.target.result;\n\n        if (currentData) {\n\n          let data = currentData.value;\n\n          negotiations.push(new Negotiation(data._date, data._quantity, data._value));\n\n          currentData.continue();\n        } else {\n\n          resolve(negotiations);\n        }\n      };\n\n      cursor.onerror = event => {\n        console.log(event.target.error);\n        reject('Cannot list negotiations');\n      };\n\n\n    })\n  }\n\n  deleteAllNegotiations() {\n\n    return new Promise((resolve, reject) => {\n\n      let request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .clear();\n\n      request.onsuccess = event => resolve('Negotiations were removed.');\n\n      request.onerror = event => {\n        console.log(event.target.error);\n        reject('Negotiations were not removed.');\n      }\n    })\n  }\n}\n"]}