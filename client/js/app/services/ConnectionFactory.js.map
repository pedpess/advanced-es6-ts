{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","dbVersion","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,6BAAY;;AAEnC,MAAMC,SAAS,CAAC,cAAD,CAAf;AACA,MAAMC,YAAY,CAAlB;AACA,MAAMC,SAAS,mBAAf;;AAEA,MAAIC,aAAa,IAAjB;;AAEA,MAAIC,QAAQ,IAAZ;;AARmC,MAU7BL,iBAV6B;AAYjC,iCAAc;AAAA;;AACb,YAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;AACA;;AAdgC;AAAA;AAAA,sCAgBV;;AAErB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,SAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,iBAAS;;AAErCd,8BAAkBe,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACD,WAHD;;AAKAR,sBAAYS,SAAZ,GAAwB,iBAAS;;AAE/B,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,MAAMC,MAAN,CAAaC,MAA1B;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAY;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AAED,WAXD;;AAaAM,sBAAYW,OAAZ,GAAsB,iBAAS;;AAE7BC,oBAAQC,GAAR,CAAYP,MAAMC,MAAN,CAAaO,KAAzB;;AAEAf,mBAAOO,MAAMC,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACD,WALD;AAMD,SA3BM,CAAP;AA6BD;AA/CgC;AAAA;AAAA,oCAiDZrB,UAjDY,EAiDA;;AAE/BH,eAAOyB,OAAP,CAAe,iBAAS;;AAEtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACjDzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAED,SALD;AAMD;AAzDgC;AAAA;AAAA,wCA2DR;AACvB3B;AACAD,qBAAa,IAAb;AACD;AA9DgC;;AAAA;AAAA;AAgEpC,CAhED","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n\n  const stores = ['negotiations'];\n  const dbVersion = 1;\n  const dbName = 'negotiationsframe';\n\n  var connection = null;\n\n  var close = null;\n\n  class ConnectionFactory {\n\n    constructor() {\n     throw new Error('Cannot create an instance of ConnectionFactory');\n    }\n\n    static getConnection() {\n\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, dbVersion);\n\n        openRequest.onupgradeneeded = event => {\n\n          ConnectionFactory._createStores(event.target.result);\n        }\n\n        openRequest.onsuccess = event => {\n\n          if (!connection) {\n            connection = event.target.result;\n            close = connection.close.bind(connection);\n            connection.close = function () {\n              throw new Error('You cannot close a connection directly.');\n            }\n          }\n          resolve(connection);\n\n        }\n\n        openRequest.onerror = event => {\n\n          console.log(event.target.error);\n\n          reject(event.target.error.name);\n        }\n      })\n\n    }\n\n    static _createStores(connection) {\n\n      stores.forEach(store => {\n\n        if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n        connection.createObjectStore(store, { autoIncrement: true });\n\n      });\n    }\n\n    static closeConnection() {\n      close();\n      connection = null;\n    }\n  }\n})\n"]}